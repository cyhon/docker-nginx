worker_processes auto;

events {
  worker_connections 10240;
  use epoll;
  multi_accept on;
}


http {
  tcp_nodelay on;
  proxy_http_version 1.1;
  include /nginx/conf/mime.types;
        default_type application/octet-stream;

        ##
        # Logging Settings
        ##

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

    lua_shared_dict prometheus_metrics 50M;
    lua_package_path "/nginx/lua/?.lua";
    init_by_lua '
      prometheus = require("prometheus").init("prometheus_metrics")
      metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"host", "uri", "status"})
      metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host"}, {0.05, 0.2, 0.5, 1, 2, 5})
--      metric_connections = prometheus:gauge(
--        "nginx_http_connections", "Number of HTTP connections", {"state"})
    ';
    log_by_lua '
      metric_requests:inc(1, {ngx.var.host, ngx.var.uri, ngx.var.status})
      metric_latency:observe(ngx.now() - ngx.req.start_time(), {ngx.var.host})
    ';

    server {
      listen 9092;
      location /metrics {
        content_by_lua '
--          metric_connections:set(ngx.var.connections_reading, {"reading"})
--          metric_connections:set(ngx.var.connections_waiting, {"waiting"})
--          metric_connections:set(ngx.var.connections_writing, {"writing"})
          prometheus:collect()
        ';
      }
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }
    }
}
